dnl Process this file with autoconf to produce a configure script.

AC_INIT(vchkpw.c)

PACKAGE="vpopmail"
VERSION="5.3.31"

AM_INIT_AUTOMAKE($PACKAGE,$VERSION)
AM_CONFIG_HEADER(config.h)

AC_CANONICAL_HOST

#----------------------------------------------------------------------

dnl Checks for programs.
AC_PROG_CXX
AC_PROG_AWK
AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_RANLIB

#AC_AIX
AC_ISC_POSIX

#----------------------------------------------------------------------

AC_CHECK_LIB(crypt, crypt)
#AC_CHECK_LIB(nsl, gethostbyaddr)
#AC_CHECK_LIB(socket, getsockname)

#----------------------------------------------------------------------

dnl Checks for header files.
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS([arpa/inet.h fcntl.h memory.h netinet/in.h shadow.h stdlib.h string.h sys/file.h sys/param.h sys/socket.h sys/time.h syslog.h unistd.h utime.h])

#----------------------------------------------------------------------

# Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_TYPE_UID_T
AC_C_INLINE
AC_TYPE_MODE_T
AC_TYPE_OFF_T
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_CHECK_MEMBERS([struct stat.st_blksize])
AC_STRUCT_TM

#----------------------------------------------------------------------

# Checks for library functions.
AC_FUNC_CHOWN
AC_FUNC_CLOSEDIR_VOID
AC_FUNC_FORK
AC_FUNC_LSTAT
AC_FUNC_LSTAT_FOLLOWS_SLASHED_SYMLINK
AC_FUNC_MALLOC
AC_FUNC_REALLOC
AC_TYPE_SIGNAL
AC_FUNC_STAT
AC_FUNC_UTIME_NULL
AC_CHECK_FUNCS([bzero dup2 fdatasync getcwd gethostname getpass getspnam memset mkdir putenv rmdir socket strchr strdup strerror strncasecmp strrchr strspn strstr utime])

#----------------------------------------------------------------------

#default to use CDB authentication
USE_CDB=1

#----------------------------------------------------------------------

AC_MSG_NOTICE(Now checking vpopmail configure options...)

#----------------------------------------------------------------------

case "$host" in
  *-*-sunos4.1.1*)
    idcommand="/usr/xpg4/bin/id -u"
    ;;
  *-*-solaris2.8*)
    idcommand="/usr/xpg4/bin/id -u"
    ;;
  *-*-solaris*)
    idcommand="/usr/xpg4/bin/id -u"
    ;;
  *)
    idcommand="id -u"
    ;;
esac

#----------------------------------------------------------------------

if test `$idcommand` != "0"
then
  AC_MSG_WARN(=== vpopmail must be configured as root. ===)
  AC_MSG_WARN(=== please switch to the root user and  ===)
  AC_MSG_WARN(=== run ./configure. Thanks ===)
  AC_MSG_ERROR(aborted.)
fi

#----------------------------------------------------------------------

if test "$GCC" = yes ; then
  CXXFLAGS="$CXXFLAGS -Wall"
  CFLAGS="$CFLAGS -Wall"
fi

#----------------------------------------------------------------------

case "$host" in
  *-*-sunos4.1.1*)
        PS_COMMAND="ps -aux"
    ;;
  *-*-solaris*)
        PS_COMMAND="ps -ef"
    ;;
  *-*-sunos*)
        PS_COMMAND="ps -ef"
    ;;
  *-sgi-5*)
        PS_COMMAND="ps -ef"
    ;;
  *-ibm-aix*)
        PS_COMMAND="ps -ef"
    ;;
  mips-dec-mach3*)
        PS_COMMAND="ps -ef"
    ;;
  *-dec-ultrix*)
        PS_COMMAND="ps -ef"
    ;;
  *-*-hpux*)
        PS_COMMAND="ps -eaf"
    ;;
  alpha-dec-osf*)
        PS_COMMAND="ps -ef"
    ;;
  *-*-nextstep*)
        PS_COMMAND="ps -ef"
    ;;
  i*86-*-bsdi*)
        PS_COMMAND="ps axww"
    ;;
  i*86-unknown-bsd*)
        PS_COMMAND="ps -ef"
    ;;
  m68k-sony-newsos*)
        PS_COMMAND="ps -ef"
    ;;
  mips-sony-bsd*)
        PS_COMMAND="ps -ef"
    ;;
  m68k-apple-aux*)
        PS_COMMAND="ps -ef"
    ;;
  m88k-dg-dgux*)
        PS_COMMAND="ps -ef"
    ;;
  t3e-*-*)
        PS_COMMAND="ps -ef"
    ;;
  *-cray-unicos*)
        PS_COMMAND="ps -ef"
    ;;
  *-*-sysv4*)
        PS_COMMAND="ps -ef"
    ;;
  *-*-machten*)
        PS_COMMAND="ps -ef"
    ;;
  i*86-unknown-sco*)
        PS_COMMAND="ps -ef"
    ;;
  *-convex-bsd*)
        PS_COMMAND="ps -ef"
    ;;
  *-sequent-ptx*)
        PS_COMMAND="ps -ef"
    ;;
  *-sequent-dynix*|*-sequent-ptx*)
        PS_COMMAND="ps -ef"
    ;;
  *-*-freebsd*)
        PS_COMMAND="ps aux"
    ;;
  *-*-netbsd*)
        PS_COMMAND="ps aux"
    ;;
  *-*-openbsd*)
        PS_COMMAND="ps -aux"
    ;;
  *-*-IRIX*)
        PS_COMMAND="ps -ef"
    ;;
  *)
        PS_COMMAND="ps axww"
    ;;
esac
AC_DEFINE_UNQUOTED(PS_COMMAND,"$PS_COMMAND","")

#----------------------------------------------------------------------

case "$host" in
  *-*-solaris*)
    extralibflags="-R$libdir"
    AC_MSG_NOTICE(Solaris install detected.  Using extralibflags for linking: $extralibflags)
    ;;
  *)
    extralibflags=""
    ;;
esac


#----------------------------------------------------------------------

if test ! -d $vpopmaildir/etc
then
  mkdir $vpopmaildir/etc
  chown $vpopmailuid "$vpopmaildir"/etc
  chgrp $vpopmailgid "$vpopmaildir"/etc
  chmod 755 "$vpopmaildir"/etc
  AC_MSG_WARN( making a vpopmail etc directory )
fi

#----------------------------------------------------------------------

AC_MSG_CHECKING(whether we can locate the qmail directory)
qmaildir=""
for f in /var/qmail
do
    if test -d $f
    then
        qmaildir=$f
    fi
done

AC_ARG_ENABLE(qmaildir,
    [  --enable-qmaildir=dir    Directory where qmail is installed (default /var/qmail)],
    qmaildir="$enableval",
    [
        if test "$qmaildir" = ""
        then
            AC_MSG_RESULT(no)
            AC_MSG_ERROR([Unable to find your qmaildir directory, specify --enable-qmaildir.])
        fi
    ]
)

AC_MSG_RESULT(yes)
AC_DEFINE_UNQUOTED(QMAILDIR,"$qmaildir","")

#----------------------------------------------------------------------

AC_MSG_CHECKING(whether we can locate the qmail-newu program)
qmailnewu=""
for f in "$qmaildir"/bin/qmail-newu /usr/sbin/qmail-newu
do
    if test -f $f
    then
        qmailnewu=$f
        break
    fi
done

AC_ARG_ENABLE(qmail-newu,
    [  --enable-qmail-newu=path    Full path to qmail-newu program],
    qmailnewu="$enableval",
    [
        if test "$qmailnewu" = ""
        then
            AC_MSG_RESULT(no)
            AC_MSG_ERROR([Unable to find your qmail-newu file, specify --enable-qmail-newu.])
        fi
    ]
)

if test ! -f "$qmailnewu"
then
    AC_MSG_RESULT(no)
    AC_MSG_ERROR([Unable to find your qmail-newu file, specify --enable-qmail-newu=/full/path/to/qmail-newu])
fi

AC_MSG_RESULT(yes)
AC_DEFINE_UNQUOTED(QMAILNEWU,"$qmailnewu","")

#----------------------------------------------------------------------

AC_MSG_CHECKING(whether we can locate the qmail-inject program)
qmailinject=""
for f in "$qmaildir"/bin/qmail-inject /usr/sbin/qmail-inject /usr/bin/qmail-inject
do
    if test -f $f
    then
        qmailinject=$f
        break
    fi
done

AC_ARG_ENABLE(qmail-inject,
    [  --enable-qmail-inject=path    Full path to qmail-inject program],
    qmailinject="$enableval",
    [
        if test "$qmailinject" = ""
        then
            AC_MSG_RESULT(no)
            AC_MSG_ERROR([Unable to find your qmailinject file, specify --enable-qmail-inject.])
        fi
    ]
)

if test ! -f "$qmailinject"
then
    AC_MSG_RESULT(no)
    AC_MSG_ERROR([Unable to find your qmail-inject file, specify --enable-qmail-inject=/full/path/to/qmail-inject])
fi

AC_MSG_RESULT(yes)
AC_DEFINE_UNQUOTED(QMAILINJECT,"$qmailinject","")

#----------------------------------------------------------------------

AC_MSG_CHECKING(whether we can locate the qmail-inject program)
qmailnewmrh=""
for f in "$qmaildir"/bin/qmail-newmrh /usr/sbin/qmail-newmrh
do
    if test -f $f
    then
        qmailnewmrh=$f
        break
    fi
done

AC_ARG_ENABLE(qmail-newmrh,
    [  --enable-qmail-newmrh=path Full path to qmail-newmrh program],
    qmailnewmrh="$enableval",
    [
        if test "$qmailnewmrh" = ""
        then
            AC_MSG_RESULT(no)
            AC_MSG_ERROR([Unable to find your qmail-newmrh file, specify --enable-qmail-newmrh.])
        fi
    ]
)

if test ! -f "$qmailnewmrh"
then
    AC_MSG_RESULT(no)
    AC_MSG_ERROR([Unable to find your qmail-newmrh file, specify --enable-qmail-qmail-newmrh=/full/path/to/qmail-newmrh])
fi

AC_MSG_RESULT(yes)
AC_DEFINE_UNQUOTED(QMAILNEWMRH,"$qmailnewmrh","")

#----------------------------------------------------------------------

AC_MSG_NOTICE(Checking for valid vpopmail user, group and home directory)

vpopuser="vpopmail"
AC_ARG_ENABLE(vpopuser,
    [  --enable-vpopuser=user   user allocated to vpopmail (default vpopmail)],
    vpopuser="$enableval",
    [
        if test "$vpopuser" = ""
        then
            AC_MSG_ERROR([Unable to find your vpopmail user, specify --enable-vpopuser.])
        fi
    ]
)

AC_DEFINE_UNQUOTED(VPOPUSER,"$vpopuser","")
AC_SUBST(vpopuser)

echo $vpopuser > vpopusername

vpopgroup="vchkpw"
AC_ARG_ENABLE(vpopgroup,
    [  --enable-vpopgroup=group   group allocated to vpopmail (default vchkpw)],
    vpopgroup="$enableval",
    [
        if test "$vpopgroup" = ""
        then
            AC_MSG_ERROR([Unable to find your vpopmail group, specify --enable-vpopgroup.])
        fi
    ]
)

AC_DEFINE_UNQUOTED(VPOPGROUP,"$vpopgroup","")
AC_SUBST(vpopgroup)


AC_MSG_CHECKING(whether password file entry for the vpopmail user exists)
AC_TRY_RUN( [
  #include <stdio.h>
  #include <pwd.h>
  #include <stdlib.h>

  int main() {
    struct passwd *pw;
    char tmpbuf[100];
    FILE *f;

        unlink("vpopmail.dir");
        unlink("vpopmail.uid");
        unlink("vpopmail.gid");

        if ( (f=fopen("vpopusername","r+"))==NULL) {
                printf("No vpopmail user found.\n");
                printf("Please add the vchkpw group and\n");
                printf("vpopmail user. Then run configure again\n");
                return(-1);
        }

        fgets(tmpbuf,100,f);
        fclose(f);
        tmpbuf[strlen(tmpbuf)-1] = 0;

        if (( pw=getpwnam(tmpbuf)) != 0 ) {
                f=fopen("vpopmail.dir","a+");
                fprintf(f,"%s\n", pw->pw_dir);
                fclose(f);

                f=fopen("vpopmail.uid", "a+");
                fprintf(f,"%d\n", pw->pw_uid);
                fclose(f);

                f=fopen("vpopmail.gid", "a+");
                fprintf(f,"%d\n", pw->pw_gid);
                fclose(f);
        } else {
                printf("No vpopmail user found.\n");
                printf("Please add the vchkpw group and\n");
                printf("vpopmail user. Then run configure again\n");
                return(-1);
        }
        return(0);
  }
  ],
    AC_MSG_RESULT(yes),
    AC_MSG_RESULT(no)
    AC_MSG_ERROR(Could not compile and run even a trivial ANSI C program - check CC.),
    AC_MSG_ERROR(Could not compile and run even a trivial ANSI C program - check CC.)
)

if test ! -f vpopmail.uid
then
        AC_MSG_ERROR(No vpopmail user.)
fi

if test ! -f vpopmail.gid
then
        AC_MSG_ERROR(No vpopmail group.)
fi

if test ! -f vpopmail.dir
then
        AC_MSG_ERROR(No vpopmail home directory)
fi

vpopmaildir=`cat vpopmail.dir`
AC_SUBST(vpopmaildir)
AC_DEFINE_UNQUOTED(VPOPMAILDIR,"$vpopmaildir","")
rm -f vpopmail.dir

vpopmailuid=`cat vpopmail.uid`
AC_DEFINE_UNQUOTED(VPOPMAILUID,$vpopmailuid,"")
rm -f vpopmail.uid

vpopmailgid=`cat vpopmail.gid`
AC_DEFINE_UNQUOTED(VPOPMAILGID,$vpopmailgid,"")
rm -f vpopmail.gid
rm -f vpopusername

#----------------------------------------------------------------------

AC_MSG_CHECKING(whether roaming-users has been enabled)
AC_ARG_ENABLE(roaming-users,
    [  --enable-roaming-users   Enable POP-before-SMTP functionality. (default disabled)],
    POPRELAY=$enableval,
        [
            POPRELAY=no
        ]
)

case $POPRELAY in
  1*|y*|Y*)
    AC_MSG_RESULT(yes)
    POPRELAY=1
    AC_DEFINE_UNQUOTED(POP_AUTH_OPEN_RELAY,$POPRELAY,"")

    AC_MSG_CHECKING(whether we can locate the tcprules program)
    for f in /usr/local/bin/tcprules /usr/bin/tcprules
    do
        if test -f $f
        then
            tcprules_prog=$f
            break
        fi
    done

    AC_ARG_ENABLE(tcprules-prog,
        [  --enable-tcprules-prog=path    full path to the tcprules program.],
        tcprules_prog="$enableval",
        [
            if test "$tcprules_prog" = ""
            then
                AC_MSG_RESULT(no)
                AC_MSG_ERROR([Unable to find your tcprules prog, specify --enable-tcprules-prog.])
            fi
        ]
    )

    if test ! -f "$tcprules_prog"
    then
        AC_MSG_RESULT(no)
        AC_MSG_ERROR([Unable to find your tcprulesfile, specify --enable-tcprules-prog=/full/path/to/tcprules])
    fi

    AC_MSG_RESULT(yes)
    AC_DEFINE_UNQUOTED(TCPRULES_PROG,"$tcprules_prog","")


    AC_MSG_NOTICE(Checking whether we can locate the tcp.smtp file)
    tcpserver_file=""
    for f in "$vpopmaildir"/etc/tcp.smtp /etc/tcp.smtp /etc/tcprules.d/qmail-smtpd
    do
        if test -f $f
        then
            tcpserver_file=$f
            break
        fi
    done

    AC_ARG_ENABLE(tcpserver_file,
        [  --enable-tcpserver-file=path   Full path to the file where tcpserver -x relay information is stored],
        tcpserver_file="$enableval",
        [
            if test "$tcpserver_file" = ""
            then
                AC_MSG_WARN([Unable to find your tcpserver relay file.])
                AC_MSG_WARN([Creating tcp.smtp in "$vpopmaildir"/etc/tcp.smtp.])

                echo "127.:allow,RELAYCLIENT=\"\"" > "$vpopmaildir"/etc/tcp.smtp
                tcpserver_file="$vpopmaildir"/etc/tcp.smtp
            fi
        ]
    )

    if test ! -f "$tcpserver_file"
    then
        AC_MSG_ERROR([Unable to find your tcp.smtp file, specify --enable-tcpserver-path=/full/path/to/tcp.smtp])
    fi

    AC_DEFINE_UNQUOTED(TCP_FILE,"$tcpserver_file","")


    AC_MSG_CHECKING(whether rebuild-tcpserver-file is been enabled)
    AC_ARG_ENABLE(rebuild-tcpserver-file,
        [  --disable-rebuild-tcpserver-file   disable rebuilding of tcpserver relay control file. ],
        REBUILD_TCPSERVER=$enableval,
                [
                        REBUILD_TCPSERVER=y
                ]
    )

    case $REBUILD_TCPSERVER in
      1*|y*|Y*)
        AC_MSG_RESULT(yes)
        REBUILD_TCPSERVER=1
        AC_DEFINE_UNQUOTED(REBUILD_TCPSERVER,$REBUILD_TCPSERVER,"")
        ;;
      *)
        AC_MSG_RESULT(no)
        ;;
    esac


    relay_clear_minutes="180"
    AC_ARG_ENABLE(relay-clear-minutes,
        [  --enable-relay-clear-minutes=minutes   expire time for roaming users after pop authentication (default 180)],
        relay_clear_minutes="$enableval",
    )

    AC_DEFINE_UNQUOTED(RELAY_CLEAR_MINUTES,$relay_clear_minutes,"")


    open_smtp_cur="$vpopmaildir/etc/open-smtp"
    open_smtp_tmp="$vpopmaildir/etc/open-smtp.tmp"
    open_smtp_lok="$vpopmaildir/etc/open-smtp.lock"
    AC_DEFINE_UNQUOTED(OPEN_SMTP_CUR_FILE,"$open_smtp_cur","")
    AC_DEFINE_UNQUOTED(OPEN_SMTP_TMP_FILE,"$open_smtp_tmp","")
    AC_DEFINE_UNQUOTED(OPEN_SMTP_LOK_FILE,"$open_smtp_lok","")
    ;;
  *)
    AC_MSG_RESULT(no)
    ;;
esac

#----------------------------------------------------------------------

AC_MSG_CHECKING(whether learn-passwords is enabled)
AC_ARG_ENABLE(learn-passwords,
        [  --enable-learn-passwords   If no password is stored for a user, learn it the first time the user POP auths],
        ENABLE_LEARN_PASSWORDS=$enableval,
                [
                        ENABLE_LEARN_PASSWORDS=n
                ]
)

case $ENABLE_LEARN_PASSWORDS in
  1*|y*|Y*)
      AC_MSG_RESULT(yes)
      ENABLE_LEARN_PASSWORDS=1
      AC_DEFINE_UNQUOTED(ENABLE_LEARN_PASSWORDS,$ENABLE_LEARN_PASSWORDS,"")
      ;;
  *)
      AC_MSG_RESULT(no)
      ;;
esac

#----------------------------------------------------------------------

AC_MSG_CHECKING(whether md5-passwords is enabled)
AC_ARG_ENABLE(md5-passwords,
        [  --disable-md5-passwords   Disable the use of MD5 encryption of passwords],
        ENABLE_MD5_PASSWORDS=$enableval,
                [
                        ENABLE_MD5_PASSWORDS=y
                ]
)

case $ENABLE_MD5_PASSWORDS in
  1*|y*|Y*)
      AC_MSG_RESULT(yes)
      ENABLE_MD5_PASSWORDS=1
      AC_DEFINE_UNQUOTED(MD5_PASSWORDS,$ENABLE_MD5_PASSWORDS,"")
      ;;
  *)
      AC_MSG_RESULT(no)
      ;;
esac

#----------------------------------------------------------------------

AC_MSG_CHECKING(whether file-locking is enabled)
AC_ARG_ENABLE(file-locking,
        [  --disable-file-locking   Disable file locking functions],
        FILE_LOCKING=$enableval,
                [
                        FILE_LOCKING=y
                ]
)

case $FILE_LOCKING in
  1*|y*|Y*)
      AC_MSG_RESULT(yes)
      FILE_LOCKING=1
      AC_DEFINE_UNQUOTED(FILE_LOCKING,$FILE_LOCKING,"")
      ;;
  *)
      AC_MSG_RESULT(no)
      ;;
esac

#----------------------------------------------------------------------

AC_MSG_CHECKING(whether file-sync is enabled)
AC_ARG_ENABLE(file-sync,
        [  --enable-file-sync     Enable file sync after each message is delivered],
        FILE_SYNC=$enableval,
                [
                        FILE_SYNC=n
                ]
)

case $FILE_SYNC in
  1*|y*|Y*)
      AC_MSG_RESULT(yes)
      FILE_SYNC=1
      AC_DEFINE_UNQUOTED(FILE_SYNC,$FILE_SYNC,"")
      ;;
  *)
      AC_MSG_RESULT(no)
      ;;
esac

#----------------------------------------------------------------------

AC_MSG_CHECKING(whether make-seekable is enabled)
AC_ARG_ENABLE(make-seekable,
        [  --disable-make-seekable  Disable the making of input to vdelivermail seekable],
        MAKE_SEEKABLE=$enableval,
                [
                        MAKE_SEEKABLE=y
                ]
)

case $MAKE_SEEKABLE in
  1*|y*|Y*)
      AC_MSG_RESULT(yes)
      MAKE_SEEKABLE=1
      AC_DEFINE_UNQUOTED(MAKE_SEEKABLE,$MAKE_SEEKABLE,"")
      ;;
  *)
      AC_MSG_RESULT(no)
      ;;
esac

#----------------------------------------------------------------------

AC_MSG_CHECKING(whether clear-passwd is enabled)
AC_ARG_ENABLE(clear-passwd,
        [  --disable-clear-passwd   Prevent storing a cleartext version of the password in addition to the encrypted version],
        CLEAR_PASS=$enableval,
                [
                        CLEAR_PASS=y
                ]
)

case $CLEAR_PASS in
  1*|y*|Y*)
      AC_MSG_RESULT(yes)
      CLEAR_PASS=1
      AC_DEFINE_UNQUOTED(CLEAR_PASS,$CLEAR_PASS,"")
      ;;
  *)
      AC_MSG_RESULT(no)
      ;;
esac

#----------------------------------------------------------------------

AC_MSG_CHECKING(whether user-big-dir is enabled)
AC_ARG_ENABLE(users-big-dir,
        [  --disable-users-big-dir    Disable hashing of user directories],
        USERS_BIG_DIR=$enableval,
                [
                        USERS_BIG_DIR=y
                ]
)

case $USERS_BIG_DIR in
  1*|y*|Y*)
      AC_MSG_RESULT(yes)
      USERS_BIG_DIR=1
      AC_DEFINE_UNQUOTED(USERS_BIG_DIR,$USERS_BIG_DIR,"")
      ;;
  *)
      AC_MSG_RESULT(no)
      ;;
esac

#----------------------------------------------------------------------

AC_MSG_CHECKING(whether sqwebmail-pass is enabled)
AC_ARG_ENABLE(sqwebmail-pass,
        [  --enable-sqwebmail-pass   Store a copy of the user's password in the the user's maildir for use by pre-v3 sqwebmail],
        ENABLE_SQWEBMAIL_PASS=$enableval,
                [
                        ENABLE_SQWEBMAIL_PASS=n
                ]
)

case $ENABLE_SQWEBMAIL_PASS in
  1*|y*|Y*)
          AC_MSG_RESULT(yes)
          ENABLE_SQWEBMAIL_PASS=1
          AC_DEFINE_UNQUOTED(SQWEBMAIL_PASS,$ENABLE_SQWEBMAIL_PASS,"")
          ;;
  *)
          AC_MSG_RESULT(no)
          ;;
esac

#----------------------------------------------------------------------

AC_MSG_CHECKING(whether qmail-ext is enabled)
AC_ARG_ENABLE(qmail-ext,
        [  --enable-qmail-ext   enable qmail email address extension support],
        QMAIL_EXT=$enableval,
                [
                        QMAIL_EXT=n
                ]
)

case $QMAIL_EXT in
  1*|y*|Y*)
        AC_MSG_RESULT(yes)
        QMAIL_EXT=1
        AC_DEFINE_UNQUOTED(QMAIL_EXT,$QMAIL_EXT,"")
        ;;
  *)
        AC_MSG_RESULT(no)
        ;;
esac

#----------------------------------------------------------------------

AC_MSG_CHECKING(whether ip-alias-domains is enabled)
AC_ARG_ENABLE(ip-alias-domains,
        [  --enable-ip-alias-domains   enable mapping default domain via reverse ip lookup table],
        IPALIAS=$enableval,
                [
                        IPALIAS=no
                ]
)

case $IPALIAS in
  1*|y*|Y*)
        AC_MSG_RESULT(yes)
        IPALIAS=1
        AC_DEFINE_UNQUOTED(IP_ALIAS_DOMAINS,$IPALIAS,"")
        ;;
  *)
        AC_MSG_RESULT(no)
        ;;
esac

#----------------------------------------------------------------------

#AC_ARG_ENABLE(hardquota,
#        [  --enable-hardquota],
#                [
#    AC_MSG_ERROR(use --enable-defaultquota instead of --enable-hardquota)
#                ]
#)

AC_MSG_CHECKING(whether a defaultquota has been nominated)
AC_ARG_ENABLE(defaultquota,
        [  --enable-defaultquota=# or n  where # is the quota as defined in README.quotas.],
        ENABLE_HARD_QUOTA=$enableval,
                [
                        ENABLE_HARD_QUOTA=0
                ]
)

case $ENABLE_HARD_QUOTA in
  0*|n*|N*)
      AC_MSG_RESULT(no)
      ;;
  y*|Y*)
      AC_MSG_RESULT(yes, but incorrectly)
      AC_MSG_ERROR(--enable-defaultquota=X or n. Where X must either be the quota, or n to signify no quota)
      ;;
  *)
      AC_MSG_RESULT(yes)
      AC_DEFINE_UNQUOTED(HARD_QUOTA,"$ENABLE_HARD_QUOTA","")
      ;;
esac

#----------------------------------------------------------------------

AC_MSG_CHECKING(whether domainquotas is enabled)
AC_ARG_ENABLE(domainquotas,
        [  --enable-domainquotas   Enable non-system domain quotas. See README.quotas for more info],
        ENABLE_DOMAIN_QUOTAS=$enableval,
                [
                        ENABLE_DOMAIN_QUOTAS=0
                ]
)

case $ENABLE_DOMAIN_QUOTAS in
  0*|n*|N*)
      AC_MSG_RESULT(no)
      ;;
  *)
      AC_MSG_RESULT(yes)
      ENABLE_DOMAIN_QUOTAS=1
      AC_DEFINE_UNQUOTED(DOMAIN_QUOTAS,$ENABLE_DOMAIN_QUOTAS,"")
      ;;
esac

#----------------------------------------------------------------------

vlimits_default="$vpopmaildir/etc/vlimits.default"

AC_DEFINE_UNQUOTED(VLIMITS_DEFAULT_FILE,"$vlimits_default","")

#----------------------------------------------------------------------

domains_dir="domains"

AC_ARG_ENABLE(domains-dir,
    [  --enable-domains-dir=domains   set domains directory name for ~vpopmail/[domains]/user/.],
    domains_dir="$enableval",
)

AC_DEFINE_UNQUOTED(DOMAINS_DIR,"$domains_dir","")
AC_SUBST(domains_dir)

#----------------------------------------------------------------------
#
#defaultdomain=""
#AC_ARG_ENABLE(default-domain, [], defaultdomain="$enableval", [])
#
#----------------------------------------------------------------------

AC_MSG_CHECKING(whether MySQL authentication has been enabled rather than CDB)

incdir=""
for f in /usr/local/mysql/include /usr/local/include/mysql /usr/include/mysql
do
    if test -d $f
    then
        incdir=$f
        break
    fi
done

AC_ARG_ENABLE(incdir,
    [  --enable-incdir=dir   Your MySQL inc dir],
    incdir="$enableval",
)

libdir=""
for f in /usr/local/mysql/lib /usr/local/lib/mysql /usr/lib/mysql
do
    if test -d $f
    then
        libdir=$f
        break
    fi
done

AC_ARG_ENABLE(libdir,
    [  --enable-libdir=dir    Your MySQL lib dir],
    libdir="$enableval",
)

#
#
#libs="mysqlclient"
#AC_ARG_ENABLE(libs, [  --enable-libs=mysqlclient libraries for sql linking.],
#    libs="$enableval",
#        [])
#

AC_ARG_ENABLE(mysql,
        [  --enable-mysql   use mysql auth backend rather than the CDB],
        USE_MYSQL=$enableval,
                [
                        USE_MYSQL=no
                ]
)

case $USE_MYSQL in
  1*|y*|Y*)
        AC_MSG_RESULT(yes)
        USE_CDB=0
        USE_SQL=1
        USE_MYSQL=1
        rm -rf vauth.c
        ln -sf vmysql.c vauth.c
        AC_SUBST(USE_MYSQL)
        AC_DEFINE_UNQUOTED(USE_SQL,$USE_SQL,"")
        AC_DEFINE_UNQUOTED(USE_MYSQL,$USE_MYSQL,"")
        #AC_CHECK_LIB(m,floor)
        #AC_CHECK_LIB(z,compress)

        if test "$incdir" = ""
        then
            AC_MSG_ERROR([Unable to find your MySQL inc dir, specify --enable-incdir.])
        fi

        if test ! -d "$incdir"
        then
           AC_MSG_ERROR([Unable to find your MySQL inc dir, specify --enable-incdir.])
        fi

        auth_inc="-I$incdir"
        AC_SUBST(auth_inc)

        if test "$libdir" = ""
        then
            AC_MSG_ERROR([Unable to find your MySQL lib dir, specify --enable-libdir.])
        fi

        if test ! -d "$libdir"
        then
            AC_MSG_ERROR([Unable to find your MySQL lib dir, specify --enable-libdir.])
        fi

        auth_libs="-L$libdir $extralibflags -lmysqlclient -lz"
        AC_SUBST(auth_libs)
        ;;
  *)
        AC_MSG_RESULT(no)
        USE_MYSQL=0
        ;;
esac

#----------------------------------------------------------------------

AC_MSG_CHECKING(whether PostGreSQL authentication has been enabled rather than CDB)

pgconfig=""
for f in /usr/local/pgsql/bin/pg_config /usr/local/bin/pg_config /usr/bin/pg_config
do
        if test -f $f
        then
                pgconfig=$f
                break
        fi
done

AC_ARG_ENABLE(postgres,
        [  --enable-postgres   use PostGreSQL auth backend rather than CDB],
        USE_POSTGRES=$enableval,
                [
                        USE_POSTGRES=no
                ]
)

case $USE_POSTGRES in
  1*|y*|Y*)
                AC_MSG_RESULT(yes)
                USE_CDB=0
                USE_SQL=1
                USE_POSTGRES=1
                rm -rf vauth.c
                ln -sf vpgsql.c vauth.c
                AC_DEFINE_UNQUOTED(USE_POSTGRES,$USE_POSTGRES,"")

                if test "$pgconfig" = ""
                then
                        AC_MSG_ERROR([Unable to locate the pg_config program.])
                fi

                if test ! -f "$pgconfig"
                then
                        AC_MSG_ERROR([Unable to locate the pg_config program.])
                fi

                auth_libs="-L`$pgconfig --libdir` -lpq "
                AC_SUBST(auth_libs)
                auth_inc="-I`$pgconfig --includedir`"
                AC_SUBST(auth_inc)
        ;;
  *)
        AC_MSG_RESULT(no)
        ;;
esac

#----------------------------------------------------------------------

AC_MSG_CHECKING(whether LDAP authentication has been enabled rather than CDB)
AC_ARG_ENABLE(ldap,
        [  --enable-ldap   use ldap auth backend rather than CDB],
        USE_LDAP=$enableval,
                [
                        USE_LDAP=no
                ]
)

case $USE_LDAP in
  1*|y*|Y*)
                AC_MSG_RESULT(yes)
                USE_CDB=0
                USE_SQL=0
                USE_LDAP=1
                rm -rf vauth.c
                ln -sf vldap.c vauth.c
                AC_DEFINE_UNQUOTED(USE_LDAP,$USE_LDAP,"")
                auth_libs="-L/usr/local/lib -lldap -llber -lresolv"
                AC_SUBST(auth_libs)
                auth_inc="-I/usr/local/include"
                AC_SUBST(auth_inc)
        ;;
  *)
        AC_MSG_RESULT(no)
        ;;
esac

#----------------------------------------------------------------------

AC_MSG_CHECKING(whether Oracle authentication has been enabled rather than CDB)
AC_ARG_ENABLE(oracle,
        [  --enable-oracle   use oracle auth backend rather than CDB],
        USE_ORACLE=$enableval,
                [
                        USE_ORACLE=no
                ]
)

case $USE_ORACLE in
  1*|y*|Y*)
                AC_MSG_RESULT(yes)
                USE_CDB=0
                USE_SQL=1
                USE_ORACLE=1
                rm -rf vauth.c
                ln -sf voracle.c vauth.c
                AC_DEFINE_UNQUOTED(USE_ORACLE,$USE_ORACLE,"")
                auth_libs="-L$libdir -lclntsh -lclient8"
                AC_SUBST(auth_libs)
                auth_inc="-I$incdir"
                AC_SUBST(auth_inc)
        ;;
  *)
        AC_MSG_RESULT(no)
        ;;
esac

#----------------------------------------------------------------------

AC_MSG_CHECKING(whether Sybase authentication has been enabled rather than CDB)
AC_ARG_ENABLE(sybase,
        [  --enable-sybase   use sybase auth backend rather than CDB],
        USE_SYBASE=$enableval,
                [
                        USE_SYBASE=no
                ]
)

case $USE_SYBASE in
  1*|y*|Y*)
                AC_MSG_RESULT(yes)
                USE_CDB=0
                USE_SQL=1
                USE_SYBASE=1
                rm -rf vauth.c
                ln -sf vsybase.c vauth.c
                AC_DEFINE_UNQUOTED(USE_SYBASE,$USE_SYBASE,"")
                auth_libs="-L/opt/sybase/lib -lsybdb -lm"
                AC_SUBST(auth_libs)
                auth_inc="-I/opt/sybase/include"
                AC_SUBST(auth_inc)
        ;;
  *)
        AC_MSG_RESULT(no)
        ;;
esac

#----------------------------------------------------------------------

AC_MSG_CHECKING(whether activedirectory authentication has been enabled rather than CDB)
AC_ARG_ENABLE(active-directory,
        [  --enable-active-directory   use active directory auth backend rather than CDB],
        USE_ACTIVE_DIR=$enableval,
                [
                        USE_ACTIVE_DIR=no
                ]
)

case $USE_ACTIVE_DIR in
  1*|y*|Y*)
                AC_MSG_RESULT(yes)
                USE_CDB=0
                USE_SQL=0
                USE_ACTIVE_DIR=1
                rm -rf vauth.c
                ln -sf vactivedir.c vauth.c
                AC_DEFINE_UNQUOTED(USE_ACTIVE_DIR,$USE_ACTIVE_DIR,"")
                authlib=""
                AC_SUBST(authlib)
                auth_inc=""
                AC_SUBST(auth_inc)
        ;;
  *)
        AC_MSG_RESULT(no)
        ;;
esac

#----------------------------------------------------------------------

AC_MSG_CHECKING(whether CDB authentication has been enabled)
case $USE_CDB in
  1*|y*|Y*)
                AC_MSG_RESULT(yes)
                USE_SQL=0
                rm -rf vauth.c
                ln -sf vcdb.c vauth.c
                AC_DEFINE_UNQUOTED(USE_CDB,$USE_CDB,"")
                authlib=""
                AC_SUBST(authlib)
                auth_inc="-Icdb"
                AC_SUBST(auth_inc)
        ;;
  *)
                AC_MSG_RESULT(no)
        ;;
esac


#----------------------------------------------------------------------

AC_MSG_CHECKING(whether passwd has been enabled)
AC_ARG_ENABLE(passwd,
        [  --enable-passwd   Enable /etc/passwd (or shadow) authentication],
        ENABLE_PASSWD=$enableval,
                [
                        ENABLE_PASSWD=no
                ]
)

case $ENABLE_PASSWD in
  1*|y*|Y*)
        AC_MSG_RESULT(yes)
        ENABLE_PASSWD=1

        AC_CHECK_HEADERS(shadow.h)
        HAS_SHADOW_H=0
        AC_CHECK_HEADER(shadow.h,
                [
                        HAS_SHADOW_H=1;
                ] )
        # if test $HAS_SHADOW_H = 1
        # then
        #        AC_CHECK_LIB(shadow, setspent)
        # fi
                AC_DEFINE_UNQUOTED(ENABLE_PASSWD,$ENABLE_PASSWD,"")
        ;;
  *)
        AC_MSG_RESULT(no)
        ENABLE_PASSWD=0
        ;;
esac

#----------------------------------------------------------------------

AC_MSG_CHECKING(whether /etc/shadow exists)
if test -f /etc/shadow
then
        AC_MSG_RESULT(yes)
        HAS_SHADOW=1
        AC_DEFINE_UNQUOTED(HAS_SHADOW,$HAS_SHADOW,"")
else
        AC_MSG_RESULT(no)
fi

#----------------------------------------------------------------------

AC_MSG_CHECKING(whether logging is enabled)
AC_ARG_ENABLE(logging,
        [  --enable-logging=n|y|e|p|v   Select level of syslog logging : n) all logging disabled,  y) success and failure without including passwords,  e) failures only without including password, p) failures only including passwords, v) verbose success and errors with passwords included],
        ENABLE_LOGGING=$enableval,
                [
                        ENABLE_LOGGING=e
                ]
)

case $ENABLE_LOGGING in
  1*|y*|Y*)
      AC_MSG_RESULT(yes)
      ENABLE_LOGGING=1
          AC_DEFINE_UNQUOTED(ENABLE_LOGGING,$ENABLE_LOGGING,"")
      ;;
  e*|E*)
      AC_MSG_RESULT(yes)
      ENABLE_LOGGING=2
          AC_DEFINE_UNQUOTED(ENABLE_LOGGING,$ENABLE_LOGGING,"")
          ;;
  p*|P*)
      AC_MSG_RESULT(yes)
      ENABLE_LOGGING=3
          AC_DEFINE_UNQUOTED(ENABLE_LOGGING,$ENABLE_LOGGING,"")
          ;;
  v*|V*)
      AC_MSG_RESULT(yes)
       ENABLE_LOGGING=4
          AC_DEFINE_UNQUOTED(ENABLE_LOGGING,$ENABLE_LOGGING,"")
          ;;
  *)
      AC_MSG_RESULT(no)
      ENABLE_LOGGING=0
          AC_DEFINE_UNQUOTED(ENABLE_LOGGING,$ENABLE_LOGGING,"")
          ;;
esac

#----------------------------------------------------------------------

log_name="vpopmail"
AC_ARG_ENABLE(log-name,
    [  --enable-log-name=name   set syslog name (default vpopmail)],
    log_name="$enableval",
)

AC_DEFINE_UNQUOTED(LOG_NAME,"$log_name","")

#----------------------------------------------------------------------

AC_MSG_CHECKING(whether auth-logging is enabled)
AC_ARG_ENABLE(auth-logging,
        [  --enable-auth-logging   Record time and ip of last auth attempt. Valid only for CDB, MySQL, PGSQL, LDAP, ActiveDir.],
        ENABLE_AUTH_LOGGING=$enableval,
                [
                        ENABLE_AUTH_LOGGING=y
                ]
)

case $ENABLE_AUTH_LOGGING in
  1*|y*|Y*)
      AC_MSG_RESULT(yes)
      ENABLE_AUTH_LOGGING=1
      AC_DEFINE_UNQUOTED(ENABLE_AUTH_LOGGING,$ENABLE_AUTH_LOGGING,"")
      ;;
  *)
      AC_MSG_RESULT(no)
      ;;
esac

#----------------------------------------------------------------------

AC_MSG_CHECKING(whether mysql-logging is enabled)
AC_ARG_ENABLE(mysql-logging,
        [  --enable-mysql-logging   Enable authentication logging to MySQL. Mimics verbosity from the --enable-auth-logging setting],
        ENABLE_MYSQL_LOGGING=$enableval,
                [
                        ENABLE_MYSQL_LOGGING=n
                ]
)

case $ENABLE_MYSQL_LOGGING in
  1*|y*|Y*)
      AC_MSG_RESULT(yes)
      if test $USE_MYSQL != 1
      then
          AC_MSG_ERROR(mysql-logging is only supported in the MySQL authentication module)
      else
        ENABLE_MYSQL_LOGGING=1
        AC_DEFINE_UNQUOTED(ENABLE_MYSQL_LOGGING,$ENABLE_MYSQL_LOGGING,"")
      fi
      ;;
  *)
      AC_MSG_RESULT(no)
      ;;
esac

#----------------------------------------------------------------------

AC_MSG_CHECKING(whether pgsql-logging is enabled)
AC_ARG_ENABLE(pgsql-logging,
        [  --enable-pgsql-logging   Enable authentication logging to PostGreSQL. Mimics verbosity from the --enable-auth-logging setting],
        ENABLE_PGSQL_LOGGING=$enableval,
                [
                        ENABLE_PGSQL_LOGGING=n
                ]
)

case $ENABLE_PGSQL_LOGGING in
  1*|y*|Y*)
      AC_MSG_RESULT(yes)
      if test $USE_PGSQL != 1
      then
          AC_MSG_ERROR(pgsql-logging is only supported in the PostgreSQL authentication module)
      else
          ENABLE_PGSQL_LOGGING=1
          AC_DEFINE_UNQUOTED(ENABLE_PGSQL_LOGGING,$ENABLE_PGSQL_LOGGING,"")
      fi
      ;;
  *)
      AC_MSG_RESULT(no)
      ;;
esac

#----------------------------------------------------------------------

AC_MSG_CHECKING(whether mysql-limits is enabled)
AC_ARG_ENABLE(mysql-limits,
        [  --enable-mysql-limits   Enable handling of .qmailadmin-limits ],
        ENABLE_MYSQL_LIMITS=$enableval,
                [
                        ENABLE_MYSQL_LIMITS=n
                ]
)

case $ENABLE_MYSQL_LIMITS in
  1*|y*|Y*)
      AC_MSG_RESULT(yes)
      if test $USE_MYSQL != 1
      then
          AC_MSG_ERROR(mysql-limits is only supported in the MySQL authentication module)
      else
          ENABLE_MYSQL_LIMITS=1
          AC_DEFINE_UNQUOTED(ENABLE_MYSQL_LIMITS,$ENABLE_MYSQL_LIMITS,"")
      fi
      ;;
  *)
      AC_MSG_RESULT(no)
      ;;
esac

#----------------------------------------------------------------------

AC_MSG_CHECKING(whether mysql-replication is enabled)
AC_ARG_ENABLE(mysql-replication,
        [  --enable-mysql-replication  Enable support for replicated MySQL auth servers],
        MYSQL_REPLICATION=$enableval,
                [
                        MYSQL_REPLICATION=n
                ]
)

case $MYSQL_REPLICATION in
  1*|y*|Y*)
        AC_MSG_RESULT(yes)
        if test $USE_MYSQL != 1
        then
                AC_MSG_ERROR(mysql-replication is only supported in the MySQL authentication module)
        else
                MYSQL_REPLICATION=1
                AC_DEFINE_UNQUOTED(MYSQL_REPLICATION,$MYSQL_REPLICATION,"")
        fi
        ;;
  *)
        AC_MSG_RESULT(no)
        ;;
esac

#----------------------------------------------------------------------

AC_MSG_CHECKING(whether valias is enabled)
AC_ARG_ENABLE(valias,
        [  --enable-valias  Enable storing aliases in MySQL],
        VALIAS=$enableval,
                [
                        VALIAS=n
                ]
)

case $VALIAS in
  1*|y*|Y*)
        AC_MSG_RESULT(yes)
        if test $USE_MYSQL != 1
        then
                AC_MSG_ERROR(valias is only supported in the MySQL authentication module)
        else
                VALIAS=1
                AC_DEFINE_UNQUOTED(VALIAS,$VALIAS,"")
        fi
        ;;
  *)
        AC_MSG_RESULT(no)
        ;;
esac

#----------------------------------------------------------------------

AC_MSG_CHECKING(whether many-domains is enabled)
AC_ARG_ENABLE(many-domains,
        [  --disable-many-domains  Rather than storing all users in a single SQL table, put each domain into its own table. Only valid for MySQL and PostgreSQL],
        MANY_DOMAINS=$enableval,
                [
                        MANY_DOMAINS=y
                ]
)

case $MANY_DOMAINS in
  1*|y*|Y*)
                AC_MSG_RESULT(yes)
                #if test $USE_SQL != 1
                #then
                #     AC_MSG_ERROR(many-domains is only supported in the SQL authentication modules)
                #else
                   MANY_DOMAINS=1
                   AC_DEFINE_UNQUOTED(MANY_DOMAINS,$MANY_DOMAINS,"")
                #fi
        ;;
  *)
                AC_MSG_RESULT(no)
                MANY_DOMAINS=0
        ;;
esac


#----------------------------------------------------------------------

AC_OUTPUT(Makefile)

#----------------------------------------------------------------------

echo "./configure \\" > vpopmail.config.sh

echo ""
echo "           $PACKAGE $VERSION           "
echo "            Current settings"
echo "---------------------------------------"
echo ""
echo "vpopmail directory = "$vpopmaildir""
echo "               uid = "$vpopmailuid""
echo "               gid = "$vpopmailgid""

case $POPRELAY in
  1*|y*|Y*)
    echo "     roaming users = ON  --enable-roaming-users"
    echo " --enable-roaming-users \\" >> vpopmail.config.sh

    echo "    tcpserver file = $tcpserver_file"
    echo "    open_smtp file = $open_smtp_cur"

    case $REBUILD_TCPSERVER in
      1*|y*|Y*)
        echo "rebuild tcpserver file = ON  --enable-rebuild-tcpserver-file (default)"
        ;;
      *)
        echo "rebuild tcpserver file = OFF --disable-rebuild-tcpserver-file"
        echo " --disable-rebuild-tcpserver-file \\" >> vpopmail.config.sh
        ;;
    esac

    ;;
  *)
    echo "     roaming users = OFF --disable-roaming-users (default)"
    ;;
esac


case $ENABLE_LEARN_PASSWORDS in
  1*|y*|Y*)
    echo " password learning = ON  --enable-learn-passwords"
    echo " --enable-learn-passwords \\" >> vpopmail.config.sh
    ;;
  *)
    echo " password learning = OFF --disable-learn-passwords (default)"
    ;;
esac


case $ENABLE_MD5_PASSWORDS in
  1*|y*|Y*)
    echo "     md5 passwords = ON  --enable-md5-passwords (default)"
    ;;
  *)
    echo "     md5 passwords = OFF --disable-md5-passwords"
    echo " --disable-learn-passwords \\" >> vpopmail.config.sh
    ;;
esac


case $FILE_LOCKING in
  1*|y*|Y*)
    echo "      file locking = ON  --enable-file-locking (default)"
    ;;
  *)
    echo "      file locking = OFF --disable-file-locking"
    echo " --disable-file-locking \\" >> vpopmail.config.sh
    ;;
esac


case $FILE_SYNC in
  1*|y*|Y*)
    echo "vdelivermail fsync = ON  --enable-file-sync"
    echo " --enable-file-sync \\" >> vpopmail.config.sh
    ;;
  *)
    echo "vdelivermail fsync = OFF --disable-file-sync (default)"
    ;;
esac


case $MAKE_SEEKABLE in
  1*|y*|Y*)
    echo "     make seekable = ON  --enable-make-seekable (default)"
    ;;
  *)
    echo "     make seekable = OFF --disable-make-seekable"
    echo " --disable-make-seekable \\" >> vpopmail.config.sh
    ;;
esac


case $CLEAR_PASS in
  1*|y*|Y*)
    echo "      clear passwd = ON  --enable-clear-passwd (default)"
    ;;
  *)
    echo "      clear passwd = OFF --disable-clear-passwd"
    echo " --disable-clear-passwd \\" >> vpopmail.config.sh
    ;;
esac


case $USERS_BIG_DIR in
  1*|y*|Y*)
    echo " user dir hashing  = ON  --enable-users-big-dir (default)"
    ;;
  *)
    echo " user dir hashing  = OFF --disable-users-big-dir"
    echo " --disable-users-big-dir \\" >> vpopmail.config.sh
    ;;
esac


# SQWEBMAIL PASS


case $QMAIL_EXT in
  1*|y*|Y*)
    echo "address extentions = ON  --enable-qmail-ext"
    echo " --enable-qmail-ext \\" >> vpopmail.config.sh
    ;;
  *)
    echo "address extentions = OFF --disable-qmail-ext (default)"
    ;;
esac


case $IPALIAS in
  1*|y*|Y*)
    echo "          ip alias = ON  --enable-ip-alias-domains"
    echo " --enable-ip-alias-domains \\" >> vpopmail.config.sh
    ;;
  *)
    echo "          ip alias = OFF --disable-ip-alias-domains (default)"
    ;;
esac


case $ENABLE_HARD_QUOTA in
  0*|n*|N*)
    echo "        user quota = OFF --enable-defaultquota=NOQUOTA (default)"
    ;;
  *)
    echo "        user quota = $ENABLE_HARD_QUOTA --enable-hardquota=$ENABLE_HARD_QUOTA"
    echo " --enable-defaultquota=$ENABLE_HARD_QUOTA \\" >> vpopmail.config.sh
    ;;
esac


case $ENABLE_DOMAIN_QUOTAS in
  1*|y*|Y*)
    echo "     domain quotas = ON  --enable-domainquotas"
    echo " --enable-domainquotas \\" >> vpopmail.config.sh
    ;;
  *)
    echo "     domain quotas = OFF --disable-domainquotas (default)"
    ;;
esac


if test $USE_MYSQL = 1
then
  echo "       auth module = mysql --enable-mysql"
  echo " --enable-mysql \\" >> vpopmail.config.sh

  case $MYSQL_REPLICATION in
    1*|y*|Y*)
      echo " mysql replication = ON  --enable-mysql-replication"
      echo " --enable-mysql-replication \\" >> vpopmail.config.sh
      ;;
    *)
      echo " mysql replication = OFF --disable-mysql-replication (default)"
      ;;
  esac

  case $ENABLE_MYSQL_LOGGING in
    1*|y*|Y*)
      echo "     mysql logging = ON  --enable-mysql-logging"
      echo " --enable-mysql-logging \\" >> vpopmail.config.sh
      ;;
    *)
      echo "     mysql logging = OFF --disable-mysql-logging (default)"
      ;;
  esac

  case $ENABLE_MYSQL_LIMITS in
    1*|y*|Y*)
      echo "      mysql limits = ON  --enable-mysql-limits"
      echo " --enable-mysql-limits \\" >> vpopmail.config.sh
      ;;
    *)
      echo "      mysql limits = OFF --disable-mysql-limits (default)"
      ;;
  esac

  case $VALIAS in
    1*|y*|Y*)
      echo "      MySQL valias = ON  --enable-valias"
      echo " --enable-valias \\" >> vpopmail.config.sh
      ;;
    *)
      echo "      MySQL valias = OFF --disable-valias (default)"
      ;;
  esac
fi


if test $USE_ORACLE = 1
then
  echo "       auth module = oracle --enable-oracle"
  echo " --enable-oracle \\" >> vpopmail.config.sh
fi


if test $USE_POSTGRES = 1
then
  echo "       auth module = postgres --enable-postgres"
  echo " --enable-postgres \\" >> vpopmail.config.sh

  case $ENABLE_PGSQL_LOGGING in
    1*|y*|Y*)
      echo "     pgsql logging = ON  --enable-pgsql-logging"
      echo " --enable-pgsql-logging \\" >> vpopmail.config.sh
      ;;
    *)
      echo "     pgsql logging = OFF --disable-pgsql-logging (default)"
      ;;
  esac

fi


if test $USE_SYBASE = 1
then
  echo "       auth module = sybase --enable-sybase"
  echo " --enable-sybase \\" >> vpopmail.config.sh
fi


if test $USE_LDAP = 1
then
  echo "       auth module = ldap --enable-ldap"
  echo " --enable-ldap \\" >> vpopmail.config.sh
fi


if test $USE_ACTIVE_DIR = 1
then
  echo "       auth module = active directory --enable-active-directory"
  echo " --enable-active-directory \\" >> vpopmail.config.sh
fi


if test $USE_CDB = 1
then
  echo "       auth module = cdb (default)"
fi


case $ENABLE_PASSWD in
  1*|y*|Y*)
    echo "  system passwords = ON  --enable-passwd"
    echo " --enable-passwd \\" >> vpopmail.config.sh
    ;;
  *)
    echo "  system passwords = OFF --disable-passwd (default)"
    ;;
esac


case $ENABLE_LOGGING in
  1*|y*|Y*)
    echo "        pop syslog = show successful and failure login attempts"
    echo "                     --enable-logging=y"
    echo " --enable-logging=y \\" >> vpopmail.config.sh
    ;;
  2*|e*|E*)
    echo "        pop syslog = show only failure attempts"
    echo "                     --enable-logging=e (default)"
    ;;
  3*|p*|P*)
    echo "        pop syslog = show failure attempts with clear text password"
    echo "                     --enable-logging=p"
    echo " --enable-logging=p \\" >> vpopmail.config.sh
    ;;
  4*|v*|V*)
    echo "        pop syslog = log success and errors including passwords"
    echo "                     --enable-logging=v"
    echo " --enable-logging=v \\" >> vpopmail.config.sh
    ;;
  *)
    echo "        pop syslog = OFF"
    ;;
esac


case $ENABLE_AUTH_LOGGING in
  1*|y*|Y*)
    echo "      auth logging = ON  --enable-auth-logging"
    echo " --enable-auth-logging \\" >> vpopmail.config.sh
    ;;
  *)
    echo "      auth logging = OFF --disable-auth-logging (default)"
    ;;
esac


if test $USE_SQL = 1
then
  if test $MANY_DOMAINS = 1
  then
    echo "all domains in one SQL table = --enable-many-domains (default)"
  else
    echo "one domain per SQL table     = --disable-many-domains"
    echo " --enable-many-domains \\" >> vpopmail.config.sh
  fi
fi

echo "          auth inc = $auth_inc"
echo "          auth lib = $auth_libs"


if test "$defaultdomain" = ""
then
  echo ""
else
  echo "** --enable-default-domain has been deprecated.  Please set"
  echo "   ~vpopmail/etc/defaultdomain to your default domain. **"
fi


echo ""
echo ""
echo "" >> vpopmail.config.sh


