The information in this file is only needed for developers who
are rolling releases using the GNU build system.  If you are
installing from a tarball, look in INSTALL.

-----------------------------------------------------------------------


To build a release:

You will nead a reasonably current copy of the GNU build system, aclocal,
automake, autoheader and autoconf.  You should start with a recent checkout
of the CVS version you want to package.   

Change to the directory with the files you want to package.  It doesn't 
matter if this is an export or a co, make dist does not include the CVS 
directories in the finished tarball.

Edit the release number in configure.in. This should appear near the end
of line 4, the second parameter to the AC_INIT macro.  Then execute the 
following commands in this order:


   # aclocal

   # automake

   # autoheader

   # autoconf

   # ./configure

   # make pre-dist
 
   # make distcheck

Make distcheck will fail, but when it fails it will have created the 
distribution tarball, and a directory created from that tarball.  The 
tarball and directory will be named vpopmail-x.x.x.tar.gz and 
vpopmail-x.x.x where x.x.x is the version number you entered in 
configure.in.

When make dist fails, verify the tarball and directory have been created.
Then cd into the directory and do a ./configure and make to verify the
programs actually compile.  You should use apropriate ./configure options
to test what ever changes you have made.  It is probably wise to do a
make install and what ever testing is apropriate to verify your changes.

Once you are satisfied with your testing, use anonymous ftp to upload the
tarball to upload.sf.net.  Be sure to change to binary mode!  Log into 
your sourceForge account on the web, go into the vpopmail group, admin
screen.  Go to file releases, add a new release to vpopmail or 
vpopmail-devel, name it after the new version, then start filling things
out.


-----------------------------------------------------------------------


How to extend the build system:

o To add a file that is carried forward in the distribution, but isn't source
code, or a header - add it to the EXTRA_DIST macro.  Wildcards are allowed.

o To add a file that is a header, but is not installed outside of the source
tree add it to the noinst_HEADERS macro.

o To add a new program that is installed in ~vpopmiail/bin do a search on an 
existing program like dotqmail2valias, and add similar code to match the name
of the new program.

o To add a new back end you must edit Makefile.am and search for instances of
vmysql.  Duplicate what you find for mysql but using the name of your new
authentication module.  Currently that means you will add your files to the
EXTRA_DIST and noinst_HEADERS macros.

You will also have to add code in configure.in.  Search for AUTH_MODULE right
after 'whether an auth module has been specified', currently around line 953.
Look at the existing blocks and try to compose one that will work.  I haven't
actually done this yet...

o To add a new ./configure option, look in ./configure --help for something
similar, then search for it in configure.am.  Copy the lines of the similar
configuration option and change the names.  Be sure to search for both the 
name like 'passwd' for --enable-passwd, and 'ENABLE_PASSWD' which is the 
define that will appear in config.h.  Quoting in these things is very wierd, 
hope you don't have to do anything unique! 
 

-----------------------------------------------------------------------

Notes on why make distcheck doesn't work:

The files in the cdb directory were created by DJB, and we are not allowed
to distribute modified versions of them.  The build system he used is not
compatible with the GNU build system, but I have added code that patches
his Makefile in make pre-dist, then removes the patch as part of make dist
or make distcheck.  This change allows make dist work, and you can get 
through enough of make distcheck to create the untarred directory from the
tarball, which makes it pretty easy to test.

I see two possible ways around this.  The best is probably to rework the
build system so it creates the cdb directory in the _build directory created
as part of make distcheck.  That key to the problem is that the cdb files
are not available in the _build directory.

Another alternative would be to build our own Makefile.am and configure.in
for the cdb directory while not changing DJB's source code.  As I read the 
license, we are allowed to pick parts of the cdb distribution for use 
without having to copy the rest.   

The first choice is probably best.  It would be nice to have make distcheck
run to completion, but I think this is still easier and safer.


-----------------------------------------------------------------------

Notes on how I fixed the build system:

Again differences between the build system used by cdb and the GNU build
system used by the rest of vpopmail were the cause of the problem with
make dist.  Specificly, make dist requires a distdir target in the Makefile.  
It doesn't require much of one, as you can see by what I had to add:

distdir:
	@echo 'nothing to do in cdb';

The other thing I had to do was cause additional files to be included in
the distribution.  There were three ways I used for various kinds of files:

EXTRA_DIST=  is a list of files that are carried forward in the distribution
but not otherwise handled by the build system.  I put the cdb directory there 
as well as the .c files for the various authentication back ends.

noinst_HEADERS= I added the .h files related to the back ends here.

The authentication back ends are not actually handled by the GNU build 
system.  Only one is compiled, and that happens indirectly because of
a symlink created outside the build system.


